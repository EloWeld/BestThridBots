'Robot: Concreter
'Code version: 0.1
'Percent of task: 5%
'That the gods come to help us to write this code.

'О-о-о, костыли - велосипеды.

'==============================PINS==============================
port_motors = "AD"
port_motor_left = "A"
port_motor_right = "D"
port_claw = "B"
port_sens_line = 2
port_sens_cross = 4
port_ultrasonic_sens = 3

'==============================CONSTANTS==============================
'=====PID
kp = 0.9
k_aligment = 0.6

'=====MOTORS
motor_power = 40

'=====CLAW
claw_speed = 100
claw_degrees = 900

'=====COLORS
black_line = 17
black_cross = 13
white_line = 91
white_cross = 85
red_cross = 75

white_avg = (white_line + white_cross) / 2
black_avg = (black_line + black_cross) / 2

middle_value = black_avg + ((white_avg - black_avg) / 2)
middle_value_line = black_line + ((white_line - black_line) / 2)
middle_value_cross = black_line + ((white_cross - black_cross) / 2)

difference = 3

'======DIST
wheel_radius = 55 / 2
rotate_radius = 165 / 2
dist_to_sensors = 10
dist_to_ultrasonic = 6.5

dist_to_first_layer = 6
dist_to_second_balls_lay = 75
dist_to_end_balls_lay = 100

n_degreese = 450 'Need to calculate
dist_to_box = 6 'Need to calculate!
dist_between_balls = 5 'Need to calculate!
dist_between_boxes = 4.8 'Need to calculate!
dist_to_boxes[1] = 42 
dists[1] = (rotate_radius / 10) + dist_to_sensors + 1 'От старта до линии горки
dists[2] = 70 ' От средней линии, до бетонного корыта
dists[3] = 92 ' От линии горки до средней линии
dists[4] = 20 ' Отъезд назад к линии бетона
dists[5] = 22 'Отъезд назад от красной линии
dists[6] = 20 'Проехать в опалубку для высвобождения бетона


'==============================VARIABLES==============================
f_dist = 0
balls_dist[1] = 0
curr_box = 1
red_line = "false"
stop = 0
n = 0

'==============================PROCEDURES==============================
'=====Moving line while not red
sub move_line_until_cross
  if (red_line) then
    limit = red_cross + ((white_cross - red_cross) * 0.1)
  else
    limit = middle_value_cross
  endif
  while (Sensor.readPercent(port_sens_cross) > limit)
    p_value = (Sensor.ReadPercent(port_sens_line) - middle_value_line) * kp
    Motor.StartPower(port_motor_left, motor_power + p_value)
    Motor.StartPower(port_motor_right, motor_power)
  endwhile
  Motor.Stop(port_motors, "true")
endsub

sub move_until_balls
  Motor.ResetCount(port_motors)
  n = n + 1
  'Второе условие на случай, если мячиков нет
  while (Sensor.ReadRawValue(port_ultrasonic_sens, 0) < dist_to_second_balls_lay) and (Motor.GetCount(port_motor_left) + Motor.GetCount(port_motor_right) / 2 < n_degreese)
    Motor.StartPower(port_motor_left, motor_power)
    Motor.StartPower(port_motor_right, motor_power)
  endwhile
  Motor.Stop(port_motors, "true")
  if (Motor.GetCount(port_motor_left) + Motor.GetCount(port_motor_right) / 2 >= n_degreese) then
    stop = 1
  endif
endsub

sub move_until_cross
  while (Sensor.readPercent(port_sens_line) > middle_value_line or Sensor.readPercent(port_sens_cross) > middle_value_cross)
    Motor.StartPower(port_motor_left, motor_power)
    Motor.StartPower(port_motor_right, motor_power)
  endwhile
  Motor.Stop(port_motors, "true")
endsub

sub line_aligment
  finish = 0
  while (finish = 0)
    if (Sensor.ReadPercent(port_sens_cross) <= middle_value) and (Sensor.ReadPercent(port_sens_line) <= middle_value) and (Math.Abs(Sensor.ReadPercent(port_sens_cross) - Sensor.ReadPercent(port_sens_line)) <= difference) then
      finish = 1
    endif
    error_left = Sensor.ReadPercent(port_sens_cross) - middle_value
    error_right = Sensor.ReadPercent(port_sens_line) - middle_value
    motor_left_speed = error_left * k_aligment
    motor_right_speed = error_right * k_aligment
    Motor.StartPower(port_motor_left, motor_left_speed)
    Motor.StartPower(port_motor_right, motor_right_speed)
  endwhile
  Motor.Stop(port_motors, "true")
endsub

sub move_to_cross_center
  angle = 180 * dist_to_sensors / wheel_radius * 3.14
  Motor.MoveSync(port_motors, motor_power, motor_power, angle, "true")
endsub

'=====TURNS=====
sub turn_45_right
  angle = 45 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, motor_power, -motor_power, angle, "true")
endsub

sub turn_45_left
  angle = 45 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, -motor_power, motor_power, angle, "true")
endsub

sub turn_90_right
  angle = 90 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, motor_power, -motor_power, angle, "true")
endsub

sub turn_90_left
  angle = 90 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, -motor_power, motor_power, angle, "true")
endsub

sub turn_135_right
  angle = 135 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, motor_power, -motor_power, angle, "true")
endsub

sub turn_135_left
  angle = 135 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, -motor_power, motor_power, angle, "true")
endsub

sub turn_180
  angle = 180 * rotate_radius / wheel_radius
  Motor.MoveSync(port_motors, motor_power, -motor_power, angle, "true")
endsub

'=====HZ VOOBSHE=====
sub dist_to_degrees
  degrees = 180 * f_dist / wheel_radius * 3.14
endsub

'=====CLAW=====
sub grab_ball_90
  angle = 180 * dist_to_first_layer / wheel_radius * 3.14 'Need to calculate
  turn_90_right()
  Motor.MoveSync(port_motors, motor_power, motor_power, angle, "true") 'Move to cell
  Motor.MoveSync(port_motors, motor_power, -motor_power, 5, "true") 'Aim to ball
  Motor.MoveSync(port_motors, -motor_power, motor_power, 5, "true")
  Motor.Move(port_claw, claw_speed, claw_degrees, "true") 'Grab
  Motor.MoveSync(port_motors, -motor_power, -motor_power, angle, "true") 'Move to cell
  turn_90_right()
endsub

sub grab_ball_45
  angle = 180 * dist_to_first_layer / wheel_radius * 3.14 'Need to calculate
  turn_45_right()
  Motor.MoveSync(port_motors, motor_power, motor_power, angle, "true") 'Move to cell
  Motor.Move(port_claw, claw_speed, claw_degrees, "true") 'Grab
  Motor.MoveSync(port_motors, -motor_power, -motor_power, angle, "true") 'Move to cell
  turn_135_right()
endsub

sub release_ball
  angle = 180 * dists[6] / wheel_radius * 3.14 'Need to calculate
  turn_90_left()
  Motor.MoveSync(port_motors, motor_power, motor_power, angle, "true") 'Move to cell
  Motor.Move(port_claw, -claw_speed, claw_degrees, "true") 'Release
  Motor.MoveSync(port_motors, -motor_power, -motor_power, angle, "true") 'Moving little back
  turn_90_left()
endsub

sub checking_balls
  ' KTO SIEL MOI SPAGETTI
endsub

sub play_fanfars
  Speaker.Note(5, "C4", 50)  
  Speaker.Wait()
  Speaker.Note(5, "E4", 50) 
  Speaker.Wait() 
  Speaker.Note(5, "G4", 50)  
  Speaker.Wait()
  Speaker.Note(5, "B4", 50) 
  Speaker.Wait() 
  Speaker.Note(5, "C5", 150) 
  Speaker.Wait() 
  Speaker.Note(5, "C5", 70) 
  Speaker.Wait() 
  Speaker.Note(5, "C5", 70) 
  Speaker.Wait() 
  Speaker.Note(5, "C5", 200) 
  Speaker.Wait() 
endsub
'==============================MAIN==============================
Sub setup
  Sensor.SetMode(port_sens_cross, 0)
  Sensor.SetMode(port_sens_line, 0)
  Sensor.SetMode(port_ultrasonic_sens, 0)
endsub

Sub main
  play_fanfars()
  Motor.Move(port_claw, -claw_speed, claw_degrees, "true") 'Открываем клешню
  move_until_cross() ' Едем до начала линии старта
  f_dist = dists[1]
  dist_to_degrees() ' Едем вперёд до "линии" горки
  Motor.MoveSync(port_motors, motor_power, motor_power, degrees, "true")
  turn_90_left()
  f_dist = dists[3]
  dist_to_degrees() ' Едем до средней линии
  Motor.MoveSync(port_motors, motor_power, motor_power, degrees, "true")
  move_until_cross() ' Едем до средней линии
  'while (stop = 0) !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Он нужен =)  
  line_aligment()
  
  If "false" then
    move_to_cross_center() ' Ровняемся
    turn_90_right()
    red_line = "true"
    move_line_until_cross()
    f_dist = dists[4]
    dist_to_degrees() ' Едем назад
    Motor.MoveSync(port_motors, -motor_power, -motor_power, degrees, "true")
    turn_90_left()
    Speaker.Note(60, "A4", 200)
    
    f_dist = dists[2] ' Едем до мячей
    dist_to_degrees()
    Motor.MoveSync(port_motors, motor_power, motor_power, degrees, "true")
    Speaker.Note(60, "B3", 300)
    
    f_dist = dist_to_ultrasonic
    dist_to_degrees()
    Motor.MoveSync(port_motors, -motor_power, -motor_power, degrees, "true")
    move_until_balls()
    if (n = 1) then
      f_dist = dist_between_balls
      dist_to_degrees()
      Motor.MoveSync(port_motors, -motor_power, -motor_power, f_dist, "true")
      grab_ball_45()
    else
      grab_ball_90()
    endif
    f_dist = dists[2]
    dist_to_degrees()
    Motor.MoveSync(port_motors, motor_power, motor_power, degrees - 720, "true")
    move_until_cross()
    move_to_cross_center()
    turn_90_right()
    move_line_until_cross()
    ''''''''''''''''''''''''''''''''''''''''''
    ' Едем назад от красной линии до проезда к коробкам и выравниваемся
    f_dist = dists[5]
    dist_to_degrees()
    Motor.MoveSync(port_motors, -motor_power, -motor_power, degrees, "true")
    turn_90_right()
    line_aligment()
    
    ' Едем до склада коробок И выпускаем(кидаем) бетон(шарик)
    f_dist = dist_to_boxes + ((curr_box - 1) * dist_between_boxes)
    dist_to_degrees()
    Motor.MoveSync(port_motors, motor_power, motor_power, degrees, "true")
    release_ball()
    play_fanfars()
    
    'Возврат к линии
    f_dist = dist_to_boxes - 5
    dist_to_degrees()
    Motor.MoveSync(port_motors, motor_power, motor_power, degrees, "true")
    move_until_cross()
    turn_90_left()
    move_until_cross() ' До красной линии ближней стороны
    
    ' Отъезжаем назад к линии бетона
    f_dist = dists[4]
    dist_to_degrees()
    Motor.MoveSync(port_motors, -motor_power, -motor_power, degrees, "true")
    turn_90_left()
 
  'endwhile !!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!!! Он нужен =) 
  endif
endsub
  
setup()
main()